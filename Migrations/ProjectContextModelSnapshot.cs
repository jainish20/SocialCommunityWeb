// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using communityWeb.Models;

#nullable disable

namespace communityWeb.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("communityWeb.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("UName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("uName");

                    b.HasKey("Id");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("description")
                        .IsFixedLength();

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("name")
                        .IsFixedLength();

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("communityWeb.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("isApproved");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("logo");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.HasKey("Id")
                        .HasName("PK_communities");

                    b.HasIndex("OwnerId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("communityWeb.Models.CommunityMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommunityId")
                        .HasColumnType("int")
                        .HasColumnName("community_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_community_members");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("Community_members", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.CommunityRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommunityId")
                        .HasColumnType("int")
                        .HasColumnName("community_id");

                    b.Property<int?>("SentByUserId")
                        .HasColumnType("int")
                        .HasColumnName("sentByUser_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_community_request");

                    b.HasIndex("CommunityId");

                    b.HasIndex("SentByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Community_request", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.FriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sentDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_requests");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Friend_requests", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommunityId")
                        .HasColumnType("int")
                        .HasColumnName("community_id");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fileName");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("communityWeb.Models.PostAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwardId")
                        .HasColumnType("int")
                        .HasColumnName("award_id");

                    b.Property<DateTime?>("GivenDate")
                        .HasColumnType("datetime")
                        .HasColumnName("givenDate");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post_awards", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.PostFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<string>("Review")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("review");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK_Comments");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Post_feedback", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("contactNo");

                    b.Property<string>("EmailId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email_id");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FName");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LName");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("datetime")
                        .HasColumnName("registeredDate");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("communityWeb.Models.UserAwardBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwardId")
                        .HasColumnType("int")
                        .HasColumnName("award_id");

                    b.Property<double?>("Balance")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.ToTable("User_award_balance", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.UserAwardPurchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AwardId")
                        .HasColumnType("int")
                        .HasColumnName("award_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("totalAmount");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("UserId");

                    b.ToTable("User_award_purchase", (string)null);
                });

            modelBuilder.Entity("communityWeb.Models.Community", b =>
                {
                    b.HasOne("communityWeb.Models.User", "Owner")
                        .WithMany("Communities")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_communities_Users");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("communityWeb.Models.CommunityMember", b =>
                {
                    b.HasOne("communityWeb.Models.Community", "Community")
                        .WithMany("CommunityMembers")
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("FK_community_members_communities");

                    b.HasOne("communityWeb.Models.User", "User")
                        .WithMany("CommunityMembers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_community_members_Users");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("communityWeb.Models.CommunityRequest", b =>
                {
                    b.HasOne("communityWeb.Models.Community", "Community")
                        .WithMany("CommunityRequests")
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("FK_community_request_communities");

                    b.HasOne("communityWeb.Models.User", "SentByUser")
                        .WithMany("CommunityRequestSentByUsers")
                        .HasForeignKey("SentByUserId")
                        .HasConstraintName("FK_community_request_Users1");

                    b.HasOne("communityWeb.Models.User", "User")
                        .WithMany("CommunityRequestUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_community_request_Users");

                    b.Navigation("Community");

                    b.Navigation("SentByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("communityWeb.Models.FriendRequest", b =>
                {
                    b.HasOne("communityWeb.Models.User", "Receiver")
                        .WithMany("FriendRequestReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_Friend_requests_Users1");

                    b.HasOne("communityWeb.Models.User", "Sender")
                        .WithMany("FriendRequestSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_Friend_requests_Users");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("communityWeb.Models.Post", b =>
                {
                    b.HasOne("communityWeb.Models.Community", "Community")
                        .WithMany("Posts")
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("FK_Posts_communities");

                    b.HasOne("communityWeb.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Posts_Users");

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("communityWeb.Models.PostAward", b =>
                {
                    b.HasOne("communityWeb.Models.Award", "Award")
                        .WithMany("PostAwards")
                        .HasForeignKey("AwardId")
                        .HasConstraintName("FK_Post_awards_Awards");

                    b.HasOne("communityWeb.Models.Post", "Post")
                        .WithMany("PostAwards")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Post_awards_Posts");

                    b.HasOne("communityWeb.Models.User", "User")
                        .WithMany("PostAwards")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_awards_Users");

                    b.Navigation("Award");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("communityWeb.Models.PostFeedback", b =>
                {
                    b.HasOne("communityWeb.Models.Post", "Post")
                        .WithMany("PostFeedbacks")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Post_feedback_Posts");

                    b.HasOne("communityWeb.Models.User", "User")
                        .WithMany("PostFeedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Post_feedback_Users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("communityWeb.Models.UserAwardBalance", b =>
                {
                    b.HasOne("communityWeb.Models.Award", "Award")
                        .WithMany("UserAwardBalances")
                        .HasForeignKey("AwardId")
                        .HasConstraintName("FK_User_award_balance_Awards");

                    b.Navigation("Award");
                });

            modelBuilder.Entity("communityWeb.Models.UserAwardPurchase", b =>
                {
                    b.HasOne("communityWeb.Models.Award", "Award")
                        .WithMany("UserAwardPurchases")
                        .HasForeignKey("AwardId")
                        .HasConstraintName("FK_User_award_purchase_Awards");

                    b.HasOne("communityWeb.Models.User", "User")
                        .WithMany("UserAwardPurchases")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_award_purchase_Users");

                    b.Navigation("Award");

                    b.Navigation("User");
                });

            modelBuilder.Entity("communityWeb.Models.Award", b =>
                {
                    b.Navigation("PostAwards");

                    b.Navigation("UserAwardBalances");

                    b.Navigation("UserAwardPurchases");
                });

            modelBuilder.Entity("communityWeb.Models.Community", b =>
                {
                    b.Navigation("CommunityMembers");

                    b.Navigation("CommunityRequests");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("communityWeb.Models.Post", b =>
                {
                    b.Navigation("PostAwards");

                    b.Navigation("PostFeedbacks");
                });

            modelBuilder.Entity("communityWeb.Models.User", b =>
                {
                    b.Navigation("Communities");

                    b.Navigation("CommunityMembers");

                    b.Navigation("CommunityRequestSentByUsers");

                    b.Navigation("CommunityRequestUsers");

                    b.Navigation("FriendRequestReceivers");

                    b.Navigation("FriendRequestSenders");

                    b.Navigation("PostAwards");

                    b.Navigation("PostFeedbacks");

                    b.Navigation("Posts");

                    b.Navigation("UserAwardPurchases");
                });
#pragma warning restore 612, 618
        }
    }
}
